import streamlit as st
import ee
import geemap.foliumap as geemap
import geopandas as gpd
import pandas as pd
import plotly.express as px
import plotly.io as pio
import tempfile
import os
from openpyxl import Workbook
from openpyxl.drawing.image import Image as XLImage

# Configura√ß√£o da p√°gina
st.set_page_config(layout='wide')

# Inicializar Earth Engine
ee.Initialize()

# === FUN√á√ïES ===

@st.cache_data
def buscar_imagem_sentinel(_area_fc):
    colecao = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED") \
        .filterBounds(_area_fc.geometry()) \
        .filterDate('2021-01-01', '2025-12-31') \
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10)) \
        .sort('system:time_start', False)
    return colecao.first()

def calcular_ndvi(imagem):
    return imagem.normalizedDifference(['B8', 'B4']).rename('NDVI')

def ler_geojson(uploaded_file):
    if uploaded_file is not None:
        gdf = gpd.read_file(uploaded_file)
        geojson = gdf.__geo_interface__
        return ee.FeatureCollection(geojson)
    return None

def estatisticas_ndvi(ndvi, area_fc):
    stats = ndvi.reduceRegion(
        reducer=ee.Reducer.minMax().combine(
            reducer2=ee.Reducer.mean(),
            sharedInputs=True
        ),
        geometry=area_fc.geometry(),
        scale=10,
        maxPixels=1e13
    )
    return stats.getInfo()

def valor_seguro(dado, casas=4):
    return round(dado, casas) if dado is not None else None

def gerar_excel_estatisticas(df, fig_bar, fig_pie):
    wb = Workbook()
    ws = wb.active
    ws.title = "NDVI Estat√≠sticas"

    # Preencher tabela de dados
    ws.append(df.columns.tolist())
    for row in df.itertuples(index=False):
        ws.append(list(row))

    # Salvar figura do gr√°fico de barras em arquivo tempor√°rio
    fd_bar, path_bar = tempfile.mkstemp(suffix='.png')
    os.close(fd_bar)
    pio.write_image(fig_bar, path_bar, format='png', scale=2)

    # Salvar figura do gr√°fico de pizza em arquivo tempor√°rio
    fd_pie, path_pie = tempfile.mkstemp(suffix='.png')
    os.close(fd_pie)
    pio.write_image(fig_pie, path_pie, format='png', scale=2)

    # Adicionar gr√°fico de barras na planilha
    ws_bar = wb.create_sheet(title="Gr√°fico Barras")
    img_bar = XLImage(path_bar)
    img_bar.width, img_bar.height = 480, 360
    ws_bar.add_image(img_bar, "A1")

    # Adicionar gr√°fico de pizza na planilha
    ws_pie = wb.create_sheet(title="Gr√°fico Pizza")
    img_pie = XLImage(path_pie)
    img_pie.width, img_pie.height = 480, 360
    ws_pie.add_image(img_pie, "A1")

    # Salvar arquivo Excel tempor√°rio e limpar imagens tempor√°rias
    fd_excel, path_excel = tempfile.mkstemp(suffix='.xlsx')
    os.close(fd_excel)
    wb.save(path_excel)
    os.remove(path_bar)
    os.remove(path_pie)

    return path_excel

# === INTERFACE ===

st.title("üõ∞Ô∏è An√°lise de NDVI com Sentinel-2")

st.markdown("""
### Como usar esta ferramenta

1. Na aba **Dados**, envie um arquivo GeoJSON com a √°rea que deseja analisar.
2. V√° para a aba **Estat√≠sticas** para processar e visualizar os valores de NDVI m√≠nimo, m√°ximo e m√©dio.
3. Utilize os gr√°ficos gerados para interpretar os dados.
4. Opcionalmente, baixe um relat√≥rio em Excel com os dados e gr√°ficos.
5. Na aba **Mapa**, visualize a distribui√ß√£o espacial do NDVI sobre sua √°rea de estudo.

**Fonte dos dados:** [Sentinel-2 Surface Reflectance (COPERNICUS/S2_SR_HARMONIZED)](https://developers.google.com/earth-engine/datasets/catalog/COPERNICUS_S2_SR_HARMONIZED)
""")

tab_dados, tab_estatisticas, tab_mapa = st.tabs(["Dados", "Estat√≠sticas", "Mapa"])

with tab_dados:
    uploaded_file = st.file_uploader("üåé Envie o arquivo GeoJSON com sua √°rea de interesse", type="geojson")
    if uploaded_file:
        st.success("Arquivo carregado com sucesso. V√° para a aba Estat√≠sticas.")

with tab_estatisticas:
    if uploaded_file:
        with st.spinner("Processando imagem e calculando NDVI..."):
            area_fc = ler_geojson(uploaded_file)
            imagem = buscar_imagem_sentinel(area_fc)
            ndvi = calcular_ndvi(imagem)
            stats = estatisticas_ndvi(ndvi, area_fc)

            ndvi_min = stats.get('NDVI_min')
            ndvi_max = stats.get('NDVI_max')
            ndvi_mean = stats.get('NDVI_mean')

            if None in [ndvi_min, ndvi_max, ndvi_mean]:
                st.warning("N√£o foi poss√≠vel calcular NDVI para esta geometria. Verifique se a √°rea possui dados v√°lidos (ex: sem nuvens, √°gua ou fora da cobertura do Sentinel-2).")
            else:
                df_stats = pd.DataFrame([{
                    'NDVI m√≠nimo': valor_seguro(ndvi_min),
                    'NDVI m√°ximo': valor_seguro(ndvi_max),
                    'NDVI m√©dio': valor_seguro(ndvi_mean)
                }])

                st.subheader("Estat√≠sticas de NDVI")
                st.dataframe(df_stats)

                cores_ndvi = {
                    "NDVI m√≠nimo": "#d73027",
                    "NDVI m√°ximo": "#1a9850",
                    "NDVI m√©dio":  "#fee08b",
                }

                # Gr√°fico de barras
                df_melted = df_stats.melt(var_name="Indicador", value_name="Valor")
                fig_ndvi_bar = px.bar(
                    df_melted,
                    x="Indicador",
                    y="Valor",
                    color="Indicador",
                    color_discrete_map=cores_ndvi,
                    title="Resumo do NDVI"
                )
                st.plotly_chart(fig_ndvi_bar)

                # Gr√°fico de pizza
                valores = {
                    'Indicador': ['NDVI m√≠nimo', 'NDVI m√°ximo', 'NDVI m√©dio'],
                    'Valor': [ndvi_min, ndvi_max, ndvi_mean]
                }
                df_pizza = pd.DataFrame(valores)
                soma = df_pizza['Valor'].sum()
                df_pizza['Percentual (%)'] = df_pizza['Valor'] / soma * 100

                fig_ndvi_pie = px.pie(
                    df_pizza,
                    names='Indicador',
                    values='Percentual (%)',
                    title='Distribui√ß√£o percentual dos valores de NDVI',
                    color_discrete_sequence=[
                        "#d73027",  # vermelho (NDVI m√≠nimo)
                        "#1a9850",  # verde (NDVI m√°ximo)
                        "#fee08b"   # amarelo (NDVI m√©dio)
                    ]
                )
                st.plotly_chart(fig_ndvi_pie)

                if st.button("Exportar relat√≥rio Excel (.xlsx)"):
                    caminho_arquivo = gerar_excel_estatisticas(df_stats, fig_ndvi_bar, fig_ndvi_pie)
                    with open(caminho_arquivo, 'rb') as f:
                        st.download_button(
                            label="Clique aqui para baixar o relat√≥rio",
                            data=f,
                            file_name="relatorio_ndvi.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
    else:
        st.info("Fa√ßa upload do arquivo na aba 'Dados'.")

with tab_mapa:
    if uploaded_file:
        area_fc = ler_geojson(uploaded_file)
        imagem = buscar_imagem_sentinel(area_fc)
        ndvi = calcular_ndvi(imagem)

        mapa = geemap.Map()
        mapa.add_basemap("SATELLITE")
        ndvi_params = {
            'min': 0,
            'max': 1,
            'palette': ['#d7191c', '#fdae61', '#a6d96a', '#1a9641']
        }
        mapa.addLayer(ndvi, ndvi_params, 'NDVI')
        mapa.centerObject(area_fc, 12)
        mapa.addLayer(area_fc, {}, "√Årea de estudo")
        mapa.to_streamlit(height=600)
    else:
        st.info("Voc√™ precisa carregar um GeoJSON na aba 'Dados'.")
